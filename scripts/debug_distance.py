from sentence_transformers import SentenceTransformer, util
import json
from pathlib import Path
import numpy as np

model = SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")

EMBEDDINGS_PATH = Path("embeddings/embeddings.jsonl")
TARGET_TEXT_FRAGMENT = "—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö"

# 1. –ù–∞–π–¥—ë–º –Ω—É–∂–Ω—ã–π —á–∞–Ω–∫
with EMBEDDINGS_PATH.open("r", encoding="utf-8") as f:
    for i, line in enumerate(f):
        chunk = json.loads(line)
        if TARGET_TEXT_FRAGMENT in chunk["text"].lower():
            print(f"[‚úì] –ù–∞–π–¥–µ–Ω —á–∞–Ω–∫ id={i}")
            print(chunk["text"])
            chunk_vec = np.array(chunk["embedding"]).astype("float32")
            break
    else:
        print("–ß–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        exit()

# 2. –ü–æ–ª—É—á–∏–º –≤–µ–∫—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
query = "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –¥–∏–∞–ø–æ–∑–æ–Ω—ã"
query_vec = model.encode(query)

# 3. –°—á–∏—Ç–∞–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω—É—é –±–ª–∏–∑–æ—Å—Ç—å
cos_sim = util.cos_sim(query_vec, chunk_vec)[0][0].item()
print(f"\n[üîç] –ö–æ—Å–∏–Ω—É—Å–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω—É–∂–Ω–æ–º—É —á–∞–Ω–∫—É: {cos_sim:.4f}")
